name: Docker CI

on:
  push:
    paths:
      - 'main_app/**'
      - 'socket_app/**'
      - 'push_app/**'
      - 'admin_app/**'
      - '.github/workflows/*'
  pull_request:
    paths:
      - 'main_app/**'
      - 'socket_app/**'
      - 'push_app/**'
      - 'admin_app/**'
      - '.github/workflows/*'

jobs:
  build:
    name: Build ${{ matrix.service }} image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [main_app, socket_app, push_app, admin_app]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    

    - name: Create .env file
      run: |
        echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
        echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> .env
        echo ASYNC_DATABASE_URL=${{ secrets.ASYNC_DATABASE_URL }} >> .env
        echo MAIN_APP_HOST=${{ secrets.MAIN_APP_HOST }} >> .env
        echo MAIN_APP_PORT=${{ secrets.MAIN_APP_PORT }} >> .env
        echo MATCHES_APP_HOST=${{ secrets.MATCHES_APP_HOST }} >> .env
        echo MATCHES_APP_PORT=${{ secrets.MATCHES_APP_PORT }} >> .env
        echo ACCESS_TOKEN_EXPIRE_MINUTES=${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }} >> .env
        echo REFRESH_TOKEN_EXPIRE_HOURS=${{ secrets.REFRESH_TOKEN_EXPIRE_HOURS }} >> .env
        echo YANDEX_KEY_ID=${{ secrets.YANDEX_KEY_ID }} >> .env
        echo YANDEX_KEY=${{ secrets.YANDEX_KEY }} >> .env
        echo BUCKET_MESSAGE_IMAGES=${{ secrets.BUCKET_MESSAGE_IMAGES }} >> .env
        echo BUCKET_MESSAGE_VOICES=${{ secrets.BUCKET_MESSAGE_VOICES }} >> .env
        echo BUCKET_PROFILE_IMAGES=${{ secrets.BUCKET_PROFILE_IMAGES }} >> .env
        echo BUCKET_VERIFY_IMAGES=${{ secrets.BUCKET_VERIFY_IMAGES }} >> .env
        echo SMS_API_KEY=${{ secrets.SMS_API_KEY }} >> .env
        echo FIREBASE_CREDENTIALS_PATH=${{ secrets.FIREBASE_CREDENTIALS_PATH }} >> .env
        echo VERIFY_CHAT_LINK=${{ secrets.VERIFY_CHAT_LINK }} >> .env
        echo VERIFY_SEND_TEXT=${{ secrets.VERIFY_SEND_TEXT }} >> .env
        echo VERIFY_CHAT_ID=${{ secrets.VERIFY_CHAT_ID }} >> .env
        echo SMS_CENTER_LOGIN=${{ secrets.SMS_CENTER_LOGIN }} >> .env
        echo SMS_CENTER_PASSWORD=${{ secrets.SMS_CENTER_PASSWORD }} >> .env

    - name: Cache Docker layers
      uses: actions/cache@v3
      with:
        path: /tmp/docker-layers.tar
        key: ${{ runner.os }}-docker-${{ matrix.service }}-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-docker-${{ matrix.service }}-

    - name: Build ${{ matrix.service }} Docker image
      run: |
        if [ -f /tmp/docker-layers.tar ]; then
            docker load -i /tmp/docker-layers.tar
        fi
        
        docker build --cache-from=kirillka564/swipe_api:${{ matrix.service }} -t kirillka564/swipe_api:${{ matrix.service }} -f ./${{ matrix.service }}/Dockerfile .
        docker save kirillka564/swipe_api:${{ matrix.service }} > /tmp/docker-layers.tar

    - name: Run tests
      run: |
        # If you have a specific command to run tests, replace the echo command with it.
        echo "Run your tests here. For example: docker-compose run --rm app your-test-command"